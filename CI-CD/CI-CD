
# 持续集成、持续交互、持续部署

> 持续
不断的获取反馈，响应反馈;

> 集成 (Continuous Integration)
是指软件个人研发的部分向软件整体部分交付，以便尽早发现个人开发部分的问题；

> 部署 (Continuous Delivery)
是代码尽快向可运行的开发/测试节交付，以便尽早测试；

> 交付 (Continuous Deployment)
是指研发尽快向客户交付，以便尽早发现生产环境中存在的问题。


如果说等到所有东西都完成了才向下个环节交付，导致所有的问题只能再最后才爆发出来，解决成本巨大甚至无法解决。

而所谓的持续，就是说每完成一个完整的部分，就向下个环节交付，发现问题可以马上调整。是的问题不会放大到其他部分和后面的环节。

这种做法的核心思想在于：既然事实上难以做到事先完全了解完整的、正确的需求，那么就干脆一小块一小块的做，并且加快交付的速度和频率，
使得交付物尽早在下个环节得到验证。早发现问题早返工。




1. 代码越早push出去，用户能越早用到，快就是商业价值；
2. 用户越早用到就越早反馈，团队越早得到反馈，好坏都是有价值的输入；
3. 用户不反馈，说明我们做了用户不想要的东西（通过用例跟踪）或者marketing没做好，能帮助产品市场人员调整策略；
4. 代码库存越是积压，就越得不到生产检验，积压越多，代码间交叉感染的概率越大，下个release的复杂度和风险越高；
5. 代码库存越多，workflow的包袱越重，管理成本越大，说敏捷越可笑。




持续集成的核心思想是切分任务，缩短每次迭代的间隔
持续集成、持续交付、持续部署。个人理解就是 提前发现系统问题，提前暴露问题，这比在开发后期发现问题处理的成本低很多。





## 参考文章

gitlab官方英文版
https://docs.gitlab.com/ee/README.html

gitlab中文版
https://doc.gitlab.cc/ce/README.html



